@using System.Security.Claims
@using System.Threading.Tasks
@using Analystick.Web.Auth0
@using Analystick.Web.Config
@inject Microsoft.Extensions.OptionsModel.IOptions<Auth0Config> Auth0Settings

@if (User.Identity.IsAuthenticated)
{
    using (Html.BeginForm("Logout", "Account", new { returnUrl = "" }, FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
    {
        @Html.AntiForgeryToken()

        <ul class="nav navbar-nav navbar-right">
            <li><a>Hello @User.FindFirst(c => c.Type.Equals("nickname")).Value</a></li>
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
        </ul>
    }
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li><a href="javascript:showLock();">Login</a></li>
    </ul>
    <script src="//cdn.auth0.com/js/lock-8.min.js"></script>
    <script type="text/javascript">
        if (!window.location.origin) {
            window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
        }

        var lock = new Auth0Lock('@Auth0Settings.Value.ClientId', '@Auth0Settings.Value.Domain');
        @{
            var transaction = Context.PrepareAuthentication(Auth0Settings.Value.RedirectUri, "/");
        }

        function showLock() {
            lock.show({
                callbackURL: window.location.origin + '/signin-oidc',
                disableSignupAction: true,
                authParams: {
                    nonce: "@transaction.Nonce",
                    state: "@transaction.State",
                    scope: "openid nickname email",
                    response_type: "code"
                }
            });
        }
    </script>
}